// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String 
  accounts      Account[]
  sessions      Session[]
  ownedCollections Collection[]

}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model File{
  id String @id @default(cuid())
  name String
  dateAdded DateTime @default(now())
  text String
  type String
  size Int 
  collectionId String
  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  usedInTasks TasksToFiles[]
}

model Collection{
  id String @id @default(cuid())
  name String 
  files File[]
  numFiles Int
  dateCreated DateTime @default(now())
  dateUpdated DateTime @updatedAt
  ownerId String
  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  tasks Task[]
}


model Task{
  id String @id @default(cuid())
  name String 
  type String
  filesToInclude TasksToFiles[]
  collectionID String
  collection Collection @relation(fields: [collectionID], references: [id], onDelete: Cascade)
  taskData Json?
}

// model Sentiment {
//   id Int @id @default(autoincrement())
//   score Int
//   taskID String
//   file Task @relation(fields: [taskID], references: [id], onDelete: Cascade)

// }

// model NER{
//   id Int @id @default(autoincrement())
//   label String
//   text String
//   taskID String
//   task Task @relation(fields: [taskID], references: [id], onDelete: Cascade)
// }



model TasksToFiles{
  taskID String
  task Task @relation(fields: [taskID],references: [id], onDelete: Cascade)
  fileID String
  file File @relation(fields: [fileID], references: [id], onDelete: Cascade)

  @@id([taskID, fileID])
}